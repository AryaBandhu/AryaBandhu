import React, { useState, useEffect, useRef } from 'react';

const AnimateNumber = () => {
  // Create a ref to store the element that will display the animated number
  const elemRef = useRef(null);

  // State to store the current number value
  const [number, setNumber] = useState(0);

  // State to store the animation options
  const [options, setOptions] = useState({});

  // State to store the animation complete callback
  const [complete, setComplete] = useState(null);

  // Function to reverse a string
  const reverseString = (str) => str.split("").reverse().join("");

  // Number step factories
  const numberStepFactories = {
    // Append a suffix to the number
    append: (suffix) => (value) => {
      const floorValue = Math.floor(value);
      elemRef.current.textContent = `${floorValue}${suffix}`;
    },

    // Format the number with a separator
    separator: (separator, groupSize, suffix) => {
      separator = separator || " ";
      groupSize = groupSize || 3;
      suffix = suffix || "";

      return (value) => {
        const isNegative = value < 0;
        const absValue = Math.floor(Math.abs(value));
        const strValue = absValue.toString();
        const elem = elemRef.current;

        if (strValue.length > groupSize) {
          let result = "";
          let parts = [];
          let i = 0;
          let j = strValue.length;

          while (j > groupSize) {
            parts.push(strValue.substring(j - groupSize, j));
            j -= groupSize;
          }

          parts.push(strValue.substring(0, j));
          parts.reverse();

          for (i = 0; i < parts.length; i++) {
            result += parts[i] + (i < parts.length - 1 ? separator : "");
          }

          elem.textContent = (isNegative ? "-" : "") + result + suffix;
        } else {
          elem.textContent = (isNegative ? "-" : "") + strValue + suffix;
        }
      };
    },
  };

  // Animate the number
  const animateNumber = (options) => {
    setOptions(options);
    setComplete(options.complete);

    const { numberStep, ...otherOptions } = options;

    if (numberStep) {
      const setter = (value) => {
        numberStep(value, elemRef.current);
      };

      setNumber(setter);
    } else {
      setNumber(otherOptions.to);
    }
  };

  // Use effect to animate the number
  useEffect(() => {
    if (options.numberStep) {
      const numberStep = numberStepFactories[options.numberStepFactory](options.suffix, options.groupSize, options.separator);

      requestAnimationFrame(() => {
        numberStep(number);
      });
    }
  }, [options, number]);

  return (
    <div ref={elemRef} id="animate-number">
      {number}
    </div>
  );
};

export default AnimateNumber;